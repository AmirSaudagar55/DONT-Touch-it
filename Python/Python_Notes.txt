Command line utility is remaining.

Note : 1) More informations and methods is avilable in documentation of python sepcially for built-in modules to enhance utility.
       2) To know about methods available for objects (also data types) use dir(varname).

Tuple:
	1) It is immutable(eg. tuple, string) data type in python i.e it cannot be modify once declared. If you want to initialize a tupple with single element you must have to give comma after it. eg tup = (2,).
	2) tup = (1,2,3,"Hi",True)
	3) Slicing can be done and it results in new tupple.
	   tup1 = tup[1:3]  #-->tup1 = (2,)
	   tup1 = tup[2:] #-->end of slicing will be len(tup)(automatically taken by interpreter).  --> tup1 = (3,"Hi",True)
           tup1 = tup[:4] #-->Start of slicing will be 0 (automatically taken by interpreter).
	4) Operations:
		i) Changes in tuple cannot be done unless or until it is converted into mutable data structure.
			tup = (1,2,3,44,55,12,13,"hello",True,False)
			listTemp = list(tup)
			listTemp.append("hi")
			listTemp.pop(3) #--> 3 is index value
			listTemp[0]= "Amir"
			print(list)  #--->["Amir",2,3,55,12,13,"hello",True,False,"hi"]
			tup = tuple(listTemp)
			print(tup)  #-->("Amir",2,3,55,12,13,"hello",True,False,"hi")

		ii) count(element): Counts the number of elements in a tuple.
			tup = ("Amir",3,3,3,4,5,6,17,18,17)
			print(tup.count(3))   #-->3

		iii) index(element,start,end): Gives the index value of element(first occurence) in a tuple.
		     If value does not found it will raise an value error.
			print(tup.index(4)) #-->4
			print(tup.index(17,3,len(tup)-1)) #-->7

String Formatting in python:
	1) String is immutable data type in python.
	2) String can be formatted using format() method. But this make code bulky.
		eg .
		letter = ("Hi, my name is {}, and I am from {}")
		name = "Amir"
		country = "India"

		letter.format(name,country)
		print(letter) #--> Hi, my name is Amir, and I am from India

		#This can also be done in order to reduce the chances of misplacing
		letter = ("Hi, my name is {0}, and I am from {1}")
		letter.format(name,country)

	3) In order make code convenient f strings are use.
		letter = f"Hi, my name is {name}, and I am form {country}"
		print(letter) #---> Hi, my name is Amir, and I am from India
		
		price = 2.099999
		txt = f"For only {price:.2f} dollars !"  #---->For only 2.10 dollars !
		
		print(f"{2*30}") #--->60

	4) If in case you want to display {} then use following syntax:
		print(f"Hi, my name is {{name}}, and I am from {{country}}")


Docstring , PEP , The Zen of python : 
	1)Docstring in python is used for description of function. These are given just after the declaration of function.
	2)Docstring are not comments. Python consider docstring while interpreting.
	def square(x):
		'''This function is used for squaring number.'''
		print(square.__doc__)
		return x*x

	PEP : Python Enhancement Proposal. It is a documentation which provide best practices for how to write a python code.

	The Zen of Python: import this -->Gives poem by Tim Peters 

else in Loops : 
	1) In python, You can also use else with loops.
	2) else will only execute when loop complete successfully.(i.e. without any break statement)
	eg 
	for i in range(3):
		print(i)
	else:
		print(i not found)
	--->0
	    1
	    2
	    i not found

	for i in []:   #empty list
		print(i)
	else:
		print(i not found)
	--->i not found
	
	i = 0
	while(i<3):
		print(i)
		i+=1
	else:
		print(i not found)
	--->0
	    1
	    2
	    i not found


Match Case :
	Note: This control statement is available in updated python version i.e 3.10
	import os
	os.system("python --version")

	1) Match case is similar to switch case.
	2) There is no need to give break statement after each case in python. Automatically, interpreter matches the case and execute only first match case only.
	3) Default case in gives by '_' eg. case _:
	4) You can also specify if statement after each case. eg case 4 if(x%2==0):
								 case 4 if(x%3==0):
	x = int(input("Enter the value of x : "))
	match(x):
		case 1 : 
			print("Case 1 is printed.")

		case 2 : 
			print("Case 2 is printed.")

		case 3 : 
			print("Case 3 is printed.")

		case 4 if(x%2==0): 
			print("Case 4 with if statement.")

		case _ if(x>10): 
			print("x is greater than 10")

		case _ if(x>5): 
			print("x is greater than 5")

		case _ : print(x)

	colour = (25,56,200)
	match colour:
		case r,g,b:
			print("No alpha.")
		case r,g,b,alpha:
			print(f"Alpha is {alpha}")

	def sample(point):
		match point:
			case (0,0):
				print("Origin")
			case (0,y):
				print(f"Y = {y}")
			case(x,0):
				print(f"X = {x}")
			case(x,y):
				print(f"X  = {x}, Y = {y}")
			case _:
				raise ValueError("Not a point")
	sample(point = (3,4))


Sets:
	1)Sets are ---- data-types.
	2)Sets are  the collection of distinct objects.
	s1 = {1,2,3,4,5}
	s2 = {3,6,7}
	
	Operations:
	i)union() : s3 = s1.union(s2)
	ii)intersection() : s3 = s1.intersection(s2) and s1.intersection_update(s2) --->keeps common elements in set s1 only
	iii)difference() : s3 = s1.difference(s2) and s1.difference_update(s2) --->Update s1
	iv)symmetric_difference() : s3 = s1.symmetric_difference(s2) and s1.symmetric_difference_update(s2)-->Elements that are not similar to both the sets
	v)isdisjoint() : s1.isdisjoint(s2) -->Returns true if both the sets different from each other.
	vi) issuperset(), issubset()
	vii) remove(), discard() : These are used to remove element from set. eg s1.remove(2), s1.discard(2). remove() methods shows error if given element is not in a set.
	                           discard() does not shows such error.
	viii) pop() : removes or pop the last element from set. But we dont know which will be the last element as set is unordered. eg s1.pop(3)
	ix) del keyword : It deletes the entire set. eg del s1

Dictionary:
	1)Dictionary is mutable data type.
	2)Elements ordered and stored in key-value pairs.
	3)We can access value using key:
		dic[key]   #--->Will raise an error if there is no such element.
		dic.get(key) #--->Does not raise an error.
	4)dic.keys() --->Gives all keys
		for i in dic.keys():
	5)dic.items() ---> Gives an pairs in key, value form represented using each pair as tuple.
		for key,value in dic.items():
	
	Operations:
	1) update() : e1 = {1:'a', 2:'b', 3:'c', 4:'d'}
		      e2 = {3:'e', 4:'f', 5:'g'}
		      e1.update(e2) ---> e1 ={1,2,3,3,4,5}

	2) clear() : makes dictionary empty.
		     eg. dic.clear() ----> dic = {}

	3) pop(key) : Removes an key-value pair

	4) popitem() : Removes last key-value pair

	5) del : deletes the key or whole dictionary
		eg. del dic
		    del dic[key]

Exception handling in python:
	1) It makes the program robust.
	2) try and except are used for exception handling.
	eg try:
		statement1
	   except:
		statement2
	   statements3
	If statement1 raise an error, control will be given to except block.

	3) We can also specify error type:
	eg try:
		statement1
	   except valueError:
		statement2
	   except IndexError:
		statement3
	   statement4

	4) You can also use 
	  except Exception as e:
		print(e) 
	 
'finally' keyword in python:
	1) Code under finnaly block always executed.
	eg. 
	def fun():
		
		try:
			l = [10,2,3,1]
			n = int(input("Enter the number : "))
			print(l[n])
			return 1
		except:
			print("Error occured")
			return 0
		finally:
			print("I always execute")

	print(fun())
	
	Output:
		Enter the number : ahkd
		Error occured
		I always execute
		0
		
		Enter the number : 1
		2
		I always execute
		1

Custom errors:
	1) 'raise' keyword is used to raise custom errors.
	eg. 
	n = int(input("Enter number greater than 5 and less than 10 : "))
	if(a<5 or a>10):
		raise valueError("Number is not satisfaying required condition")

short-hand if else:
	1) If if else code block is short and you want to increase readability then use short hand if else
	eg.
	a = 10
	b = 9

	n = 10 if a>b else 20   #---> it means : if (a>b) : 
							n = 10
						 else:
							n = 20

	print("A") if a>b else print("=") if a==b else print("B")

Enumerate() :
	1) It is used to access both index and value of a list, tuple, etc. during iteration.
	eg.
	marks = [10,2,8,99,7,5,2]
	for index, mark in enumerate(marks):
		print(mark)
		if(index == 3):
			print("Awesome Amir! ")
	output : 
	2
	9
	8
	99
	Awesome!!
	7
	6
	1

	2) We can also specify the starting index in enumerate() function using start = value.
	eg.
	marks = [10,2,8,99,7,5,2]
	for index, mark in enumerate(marks):
		print(mark)
		if(index == 3):
			print("Awesome Amir! ")	
	output : 
	2
	9
	8
	Awesome!!
	99
	7
	6
	1

	

Virtual Environment in python :
	1) You can create your own virtual environment which will contain different packages than your global environment.
	Commands : 
		python -m venv environment_name  -->Creates virtual environment

		---------Activate Virtual Environment-------------------------------------------
		source env_name/bin/activate --> liux/mac
		env_name\Scripts\activate.bat -->Windows
		deactivate -->deactivate virtual environment

		--------Copy names of all packages along with their versions in a file----------
		pip freeze > requirements.txt
		
		---------Install all packages w.r.t. their version from a file------------------
		pip install -r requiremens.txt


Modules in python:
	1) Importing is process of loading code from module into your current script.
	eg. import math       #------> math.sqrt(225)
	eg. from math import sqrt #----> imports spcified function or variable
	eg. from math import *   #----> imports everything
	eg. import math as m  #---> m.sqrt(225)

	2) dir() function is used to view all function and variables defined in a module.
	eg. print(dir(math))

	3) You can also import multiple functions and variables separated by ','.
	eg. from amir import name, rollNo
	eg. form amir import name as n, rollNo as r

if __name__ == "__main__" :
	1) It is commonly used idom to specify whether the script is being run directly or being imported as a module in another program.
	2) '__name__' is a built-in variable which automatically set to string "__main__" if it is run directly and if it is imported as a module then
	   '__name__' is set to the name of the module.
	eg 
`	In amir.py
	def welcome():
		print("Hello from amir.py ")
	print(__name__)
	if __name__=="__main__":
		welcome()

	In main.py
	import amir
	amir.welcome()

	---output : ----
	main #---> as print(__name__) is outside of if __name__ == "__main__" and __name__ is set to name of the module during import.
`	Hello from amir
	

	3) If if ' __name__=="__main__" : ' is not there in amir.py then by just adding line 'import amir' all varible and functions(defined and called) 
	   in main will be executed.

os module:
	methods:
	1)mkdir() --> creates directory or folders. you can also use mkdirs()
	2)getcwd() --> gives path of current working directory
	3)chdir()   --> change directory
	eg.
	import os
	if(not os.path.exist("data")):
		os.mkdir("data")
	
	for i in range(0, 100):
		os.mkdir(f"data/Day{i+1}")  #----> creates folders in data as Day1 , Day2, etc.
	
	4) rename(source, destination)
	   eg. os.rename(f"data/Day{i+1}", f"data/Tutorial {i+1}")

	5) listdir() --->gives all folders in directory  --> generally used to view subfolders under folders using for loop
	   eg. folders = os.listdir("data")
	       print(folders)

	
File handling in python :
	methods:
	1)open() : It opens file. It takes two argument i.e. file_name and file mode.
	2)close() : It closes the open file.
	3)read() : Used to read contents of file. read(value) ----> value => till what position you want to read.
	4)write() : Used to write content to file.
	5)create() : Used to create file in cwd.
	eg.
	f = open("test1.py",'r')   #-----> to read file it must present there.
	text = f.read()
	print(text)

	eg.
	f = open("test2.py", 'w') #-----> It automatically creates file and open it in write mode. Write mode overwrites the content in file.
	f.write("Hello")
	
	eg.
	f = open("test3.py",'a') #----> It opens the file in append mode.
	f.write("Hi")
	
	6) You can also use modes like w+,a+,r+ to perform write-read, append-read, read-write like functions.
	7) You can open file in text mode which is default and can also be done by specifying the 't' eg. 'rt', 'wt', etc. There is also binary mode
	   which is useful when opening images, audio files, etc. It can be done by specifying the 'b' eg. 'rb', 'wb', etc.
	8) Use 'with' statement to close file automatically
		eg.
		with open("myFile.txt",'a') as f:
		f.write("Hi, I am Amir")

	9) readline() : Used to read file line by line.

	10) writeline() : Used to write on file line by line.
		eg.
		l = ["line1\n", "line2\n", "line3\n"]
		f.writeline(l)
		f.close()
	
	-------------------------------------------------------------------
	eg.
	Data.txt
	25, 99
	12 , 98
	
	main.py
	f = open("Data.txt","r")
	i = 0
	while True:
		i += 1
		line = f. readline()
		if not line:
			break
		
		m1 = line.split(",")[0]
		m2 = line.split(",")[1]
		
		print(f"Marks of student {i} in maths is : {m1}")
		print(f"Marks of student {i} in Python is : {m2}")

	f.close()

	------------------------------------------------------------------
	s = "10, 22, 30 ,40"
	>>> print(s.split(",")[0])
	10
	>>> print(s.split(","))
	['10', ' 22', ' 30 ', '40']
	>>> print(s.split(",")[3])
	40
	>>> print(s.split(",")[2])
	30
	>>> print(s.split(",")[1])
	22
	>>> print(s.split(",")[0])
	10

	11) seek(desired_cursor_position) ---> Places cursor to desired location in file.
		eg.
			test.py
		HelloWorld

		--------------------------
			main.py 
		f.seek(5)
		text = f.read()
		print(text)

		OUTPUT:
		orld		
		
		

	12) tell()  ---> returns the position of cursor.
		eg. f. tell()

	13)truncate() ---> truncates file to specific file.	
		eg.
		with open("test.txt", 'w') as f:
			f.write("Hello World")
			f.truncate(5)
		---------------------
			test.txt
		Hello
		
	------------------------------------------------

Lambda Function:
	1) Lambda function is anonymous function as it does not have any name.
	   Syntax : lambda arguments : expression

	eg.
		double = lambda x : x*x   #---> double is a variable 
		print(double(2))

	2) We can also pass function as an argument to another function.
	eg.
		fun1(lambda x : x*x , 5)

			
Map, Filter and Reduce function in python :
	Note : Function which take function as a parameter are knows as higher order function.

	1) map(operation_funct, sequence) ---> perform operation on each element of a sequence and return object of resultant sequence.
		eg.
		l = [1, 10, 12,13,14]
		res = list(map(lambda x : x*x, l))
		print(res) #-----------------> [1,100,144,169,196]

	2) filter(predicate, sequence) ----> Filter out the sequence depends on the provided condition .
		eg.
		l = [2,22,10,13,12]
		def filter_function(a):
			return a>2
		res = list(filter(filter_function, l))
		print(res) #---------------------> [22,10,13,12]

	3) reduce(function, sequence) -------> It applies the function to 1st element and 2nd element and then result and 3rd element and so on.It returns the final value.
		eg.
		l = [2,1,3,1,4]
		res = reduce(lambda x,y : x+y, l)
		print(res) #------------>11


'is' vs '==' :
	1) is : It checks whether the location of elements is same or not.
	2) == : It checks whether the value of element is same or not.

	eg.
	A)
		Note : Here python allocates the same location of memory for value '2' if any variables shares the same value. They all refers to same location. Same case is for Strings.
		a = 2
		b = 2
		print(a is b) ---> true
		print(a == b) ---> true
	B)
		a = [10, 9, 8, 7]
		b = [10, 9, 8 ,7]
		print(a is b)  ---> false
		print(a == b)  ---> true
	
	C)
		a = 3
		b = 4
		print(a is b)  ---> false
		print(a == b)  ---> false


Local and Global variable :
	1) Local variables can be access in thier scope only.
	   eg.
		def func():
			a =10
		print(a)  #---------> It will raise an error because a is local to function func() and it can be access in func() only not outside of it's scope.
	2) Global variables can be access through whole program. In order to change value of global varible => 'global' keyword is used.
	3) 'global' keyword tells to does not make new local varible with same name as global variable.
	eg.
		a = 0
		def func():
			global a 
			a = 10
		print(a)

Decorators : 
	1) Decorator is used to modify functions. It take function as an argument and return modified function.
	eg.
		def greet(fx):
			def mfx():
				print("Good Morning Sir")
				fx()
				print("Thank You and Have a Nice Day")
			return mfx
	
		@greet
		def hello():
			print("Hello World")
		
		hello()
		
		OUTPUT:
		Good Morningg Sir
		Hello World
		Thank You and Have a Nice Day


                ---------------------If function have arguments--------------------------------------------------------
		def greet(fx):

			def mfx(*args, **kwargs):                 #------> *args => accept arguments as a tuple  **kwargs => accept arguments as a dictionary
				print("Good Morning Sir")
				fx(*args, **kwargs)
				print("Thank You and Have a Nice Day")

			return mfx
	
		@greet
		def add(a,b):
			print(f"Sum : {a+b}")
		
		add(10,20)		


		OUTPUT:
		Good Morningg Sir
		Sum : 30
		Thank You and Have a Nice Day

	2) Use of Decorator : One common use of decorators is to add logging to a function.




Object Oriented Programming (OOP) in python:
	A) Basic Syntax of class and object creation:
		1)  Classes are like template or blue-print of object.
		eg.
			class Student:
				name
				rollNo
			s1 = Student()
			s1.name = "Amir"
			s1.rollNo = 16

		2) 'self' keyword is used to use varibel and methods for current instance only.
		    eg.
			class Student:
				name
				rollNo
				
				def display(self):
					print(f"Name : {self.name} and Roll No. : {self.rollNo} \n")

			s1 = Student()
			s1.name = "Amir"
			s1.rollNo = 16
			s1.display()

	B) Constructor :
		1) Constructor is special member function whoese name is same as the class name and it inkove automatically upon creation of object.
		2) It is used to create and intialized object of a class.
		2) Types of constructor :
						i) Default Constructor
						ii) Parameterized Constructor
						iii) Copy Constructor
		eg.
			class Student:
				def __init__(self):
					self.name = "Amir"
					self.rollNo = 16

				def display(self):
					print(f"Name : {self.name} and Roll No. : {self.rollNo}")

			s1 = Student()
			s1.display()


			class Student:
				def __init__(self,name,r):
					self.name = name
					self.rollNo = r

				def display(self):
					print(f"Name : {self.name} and Roll No. : {self.rollNo}")

			s1 = Student("Amir",16)
			s1.display()


	C) Getter and Setter :
		1) i) We use getters & setters to add validation logic around getting and setting a value.
		   ii) To avoid direct access of a class field i.e. private variables cannot be accessed directly or modified by external user.

		2) Getters is used to access values of objects properties. It does not take any parameters. Generally, it is implemented using @property decorator.
		   Setters is used to modify values of objects properties. It can be implemented using @functName.setter

		eg.
		class Test:
			def __init__(self,value):
				self.value = value
			
			def display(self):
				print(f"Value : {self.value}")
			
			@property #----------------> Getter
			def tenValue(self):
				return 10*self.value

			@tenValue.setter
			def tenValue(self, newValue):
				self.value = newValue / 10

		obj = Test(10)
		obj.tenValue = 1000
		obj.display()   #---------------> Value : 100 #------------> Actually these are methods but we can use them as property of class
		
		print(obj.tenValue) #------------> 1000
 
			
	D) Inheritance :
		1) Note: Son has its parents properties plus he has his own propeties.
		2) This son and parent relationship can be implemented using inheritance.
		eg.
		class Employee:
			def __init__(self, name, id):
				self.name = name
				self.id = id

			def display(self):
				print(f"Name : {self.name}     id : {self.id}")

		class CEO(Employee):     #----------------------> class CEO has all attributes of class Employee and also it has its own method i.e CEO_display
			def CEO_display(self):
				print(f"CEO Mr.{self.name}   id : {self.id}")

		e1.Employee("Robo", 123)
		e1.display()
		e1.CEO_display() #------------> Will raise an error as object is of parent class

		e2.CEO("Amir Saudagar", 1)
		CEO.display()
		CEO.CEO_display()

	E) Access Modifier :
		1) There is three access modifier : public, protected and private.
		2) In python there is no concept of access modifier. And by default all data members are public.
		3) private ---> two underscore before name of the data member.
		   protected ---> one underscore before name of the data member.
		eg.
			self.__value = 10 ---> private and can be access only in class
			self._value = 10  ---> protected and can be access only in a class and its subclasses

		4) BUT we can indirectly access both private and protected in main. And python uses name mangling.
		eg.
			print(objName._ClassName__variableName)
			print(a.__dir__())
			print(a._name) #-----> can access protected ones.
		eg.
			print(a.__name) #----> raise error


	F) Static methods :
		NOTE : Not all methods in python does not have argument self. Some of them does not have self e.g static method

		1) Static Methods can be called using object and also directly as normal function.
		eg.
		class Test:
			def __init__(self, n, r):
				self.name = n
				self.rollNo = r
				
			@staticmethod
			def add(a,b):
				return a+b
		
		t = Test("Amir", 10)
		print(f"Sum : t.add(10, 20) : {t.add(10,20)}")
		print(f"Sum : add(10, 20) : {add(10, 20)}")


	G) Instance variable and Class variable :
		eg.
		class Employee:
			companyName = "Apple"  #--------> Class variable
			companySize = 0 #---------------> Class variable

			def __init__(self, name, id):
				self.name = name  #------> Instance variable
				self.id = id      #------> Instance variable
				Employee.companySize += 1
		
			def display(self):
				print(f"Name: {self.name}  ID: {self.id}  CompanyName: {self.companyName} CompanySize: {Employee.companySize}")


		e1 = Employee("Amir", 123)
		e1.name = "NM007"
		e1.companyName = "Google"
		e1.display()

		Output: Name: NM007  ID: 123  CompanyName: Apple CompanySize: 1

		----------------------------------------------------------------
		class Employee:
			companyName = "Apple"
			companySize = 0

			def __init__(self, name, id):
				self.name = name  #------> Instance variable
				self.id = id      #------> Instance variable
				Employee.companySize += 1
		
			def display(self):
				print(f"Name: {self.name}  ID: {self.id}  CompanyName: {Employee.companyName} CompanySize: {Employee.companySize}")


		e1 = Employee("Amir", 123)
		e1.name = "NM007"
		e1.companyName = "Google"
		e1.display()

		Output : Name: NM007  ID: 123  CompanyName: Apple CompanySize: 1

		1) Interpreter will search for first instance value if it is not available then it takes value of class variable.


	H) class Method :
		1) Class Methods can take class as an argument rather than instance of a class.
		eg.
		class Test :
			companyName = "Apple"
			def __init__(self):
				self.name = "Amir"

			def setCompanyName(c,name)
				c.companyName = name
		e1 = Test()
		e1.setCompanyName("Google")
		print(e1.)


			
			
			
		class Test :
			companyName = "Apple"
			def __init__(self):
				self.name = "Amir"

			def setCompanyName(c,name)
				c.companyName = name

	I) class method as constructor:
		1) We can also use class methods as a constructor.
			eg.
			class Employee:
				def __init__(self,name,id):
					self.name = name
					self.id = id

				@classmethod
				def splitLog(cs, str):
					return cs(str.split("-")[0], int(str.split("-")[1]))

				def display(self):
					print(f"Name : {self.name}  ID : {self.id}")
			
			e1 = Employee(Amir, 16)
			e1.display()
		
			e2.Employee.splitLog("Amir-57")
			e2.display()
		
	J) dir(), __dict__ and help:
		1) dir() is for displaying or knowing which methods are available for an object sepecially data types or data structures eg(list, dictionary, tuples, string,etc.).
		2) varNameORobjectName.__dict__ returns all the self variables defined in a class of an object along with their values in the form of dictionary.
		3) help(varNameORobjectName) is a function which is used to return documentation of a object including variable names and methods.
	        
		eg.
		>>> x = [1,2,3,4]
		>>> print(dir(x))
		['__add__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']
		>>> print(x.__dir__)
		<built-in method __dir__ of list object at 0x000001DA0B1E7300>
		>>> print(help(x))
		Help on list object:

		class list(object)
		 |  list(iterable=(), /)
		 |
		 |  Built-in mutable sequence.
		 |
		 |  If no argument is given, the constructor creates a new empty list.
		 |  The argument must be an iterable if specified.
		 |
		 |  Methods defined here:
		 |
		 |  __add__(self, value, /)
		 |      Return self+value.
		 |
		 |  __contains__(self, key, /)
		 |      Return key in self.
		 |
		 |  __delitem__(self, key, /)
		 |      Delete self[key].
		 |
		 |  __eq__(self, value, /)
		 |      Return self==value.
		 |
		 |  __ge__(self, value, /)
		 |      Return self>=value.
		 |
		 |  __getattribute__(self, name, /)
		 |      Return getattr(self, name).
		-- More  --    #--------------------------> Press Enter to see more

		-----------------------------------------------------------------------------------
		>>> class Test:
		...     def __init__(self):
		...             self.name = "Amir"
		...             self.rN = 16
		...     def display(self):
		...             print(f"Name : {name} and Roll No : {rN}")
		...
		>>> t = Test()
		>>> print(t.__dir__)
		<built-in method __dir__ of Test object at 0x0000015F6E61A4F0>
		>>> print(t.__dict__)
		{'name': 'Amir', 'rN': 16}

		>>> x = [10,20,30]
		>>> print(x.__dict__)
		Traceback (most recent call last):
		  File "<stdin>", line 1, in <module>
		AttributeError: 'list' object has no attribute '__dict__'

	K) 'super()' keyword :
		1) super() keyword is used to access variables and methods of parent class.
		2) It is gennerally used when methods are overriden.
		3) We can also call constructor of parent class and we can also pass arguments to them.
		eg.
		class Test:
			def __init__(self,name,rn):
				self.name = name
				self.rn = rn
			def display(self):
				print("This is from parent class.")
				print(f"Name : {self.name} and rollNO : {self.rn}")

			class Test2(Test):
				def __init__(self, name, rn, lang):
					super().__init__(name,rn)
					self.lang = lang
				def display(self):
					super().display()
					print("This is from child class")
					
			t = Test2("Amir",57,"Hindi")
			t.display()

			This is from parent class.
			Name : Amir and rollNO : 57
			This is from child class

	L) Magic methods or dunders :
		1) This are used to manipulate objects.
		2) These methods are surrounded by underscores.
		3) __str__() and __repr__() : Both are used to convert object to string representation.
		4) __call__() method is used to make object callable like function. eg obj()
		eg.

		--------------Printing object before using magic methods or dunders-----------------
		class Employee:
			def __init__(self,name):
				self.name = name

		e = Employee("Amir")
		print(e)


		<__main__.Employee object at 0x0000020B05ED0DC0>
		[Finished in 522ms]


		-----------Printing object after using magic methods or dunders----------------

		class Employee:
			def __init__(self,name):
				self.name = name
			
			def __len__(self):
				return len(self.name)

			def __str__(self):
				return f"Employee name is {self.name} from __str__() method."

			def __repr__(self):
				return f"Employee name is {self.name} from __repr__() method."

			def __call__(self):
				print("You called object as a function using __call__() method.")

		e = Employee("Amir")
		print(len(e))
		print(e)
		e()

		4
		Employee name is Amir from __str__() method.
		You called object as a function using __call__() method.
		[Finished in 508ms]

		--------If you comment __str__() method then this will be output------

		4
		Employee name is Amir from __repr__() method.
		You called object as a function using __call__() method.


		5) You can also make changes like print(str(objName)) or print(repr(objName)).

	M) Method Overriding :
		1) Method Overriding is redefing a function in derived class.
			eg.
			class CalculateArea:
				def __init__(self,x,y):
					self.x = x
					self.y = y

				def area(self):
					return self.x*self.y

			class Area2(CalculateArea):
				def __init__(self, r):
					self.r = r
					super().__init__(r,r)

				def area(self):
					print(f"Area : {3.24*super().area()}")

			a = Area2(3)
			a.area()

			Area : 29.160000000000004
			[Finished in 518ms]

	N) Operator Overloading :
		1) There are various magic methods used for operator overloading. See official documentation of python for  more methods.
			eg:
			class Add:
				def __init__(self,x,y):
					self.x = x
					self.y = y

				def display(self):
					print(f"-----> {self.x} + {self.y}i")

				def __add__(self,a2):
					return Add(a2.x+self.x , a2.y+self.y)

			a1 = Add(2,3)
			a2 = Add(3,2)
			ans = a1+a2
			ans.display()

			-----> 5 + 5i
			[Finished in 310ms]

		2)  Operator	   Magic Method
			+	__add__(self, other)
			–	__sub__(self, other)
			*	__mul__(self, other)
			/	__truediv__(self, other)
			//	__floordiv__(self, other)
			%	__mod__(self, other)
			**	__pow__(self, other)
			>>	__rshift__(self, other)
			<<	__lshift__(self, other)
			&	__and__(self, other)
			|	__or__(self, other)
			^	__xor__(self, other)

	O) Single inheritance :
		1) In single inheritance, child class is derived from single class.
        	   	eg. class child(parent):
	   
    	   Multiple inheritance :
		1) Child class is derived from multiple parent class.
         		 eg. class child(parent1, parent2, parent3)   #----> this sequence of defining parent class matters in finding a method by interpreter.
			 eg. print(child.mro())

	   Multi-level inheritance :
		1) Child class will be parent class for next derived class and so on forming levels. Last class will be superiror class containing all properties other level classes.
			eg. class Class1: 
				pass
			    class Class2(Class1): 
				pass
			    class Class3(Class2): 
				pass
			    class Class4(Class3): 
				pass
	
	   Hybrid inheritance : When more than one inheritance types are used then this type of inheritance is called as hybrid inheritance.

	   Hierarchial inheritance : When multiple derived classes are derived from single base class.

	
pyPDF module : 
	1) Used to perform operations like merge, split, delete pages, etc. from pdf.

Time module :
	1) It provides set of functions to work with time related functions like timekeeping, formatting and time conversions. eg. time.time() 
	2) time.sleep(NumberOfSeconds) ---> Delays time
	   time.localtime() ------> Gives the time according to system program is executing.
	   time.strftime("%Y-%m-%d  %H:%M:%S", localtime())  ----> Returns time and date in string format


		import time

		def useFor():
			for i in range(100):
				print(i)

		def useWhile():
			i = 0

			while(i<100):
				print(i)
				i += 1

		before1 = time.time()
		useFor()
		t1 = time.time() - before1

		before2 = time.time()
		useWhile()
		t2 = time.time() - before2

		print(f"Time taken by for loop : {t1}")
		time.sleep(3)
		print(f"Time taken by while loop : {t2}")

		time.sleep(3)
		t = time.localtime()
		currentTime = time.strftime("%Y-%m-%d  %H:%M:%S",t)
		print(currentTime)

	       OUTPUT:
		       0
			1
			2
			3
			4
			0
			1
			2
			3
			4
			Time taken by for loop : 0.0010006427764892578
			Time taken by while loop : 0.0
			2023-03-19  11:13:46
			[Finished in 6.5s]

Command Line Utility or argparse module :
	1) Command line utilities are the programs that can be run from the terminal or interface.
	2) These are the essential part of developers workflow.

Walrus Operator:
	1) Walrus operator allow programmer to perform assignment in expression.
		eg.
		Happy = False
		person = "Robo"

		if(person := "Amir"):
			Happy = True
			print(f"Happy is {Happy}")

		OUTPUT:
		Happy is True
		[Finished in 239ms]



		>>> foods = list()
		>>>
		>>> while ( (food := input("Enter food you want to add : ")) != "quit") :
		...     foods.append(food)

		OUTPUT :
		Enter food you want to add : banana
		Enter food you want to add : apple
		Enter food you want to add : seb
		Enter food you want to add : roti
		Enter food you want to add : chaval
		Enter food you want to add : dal
		Enter food you want to add : dal makhni
		Enter food you want to add : chicken dum biryani
		Enter food you want to add : paneer
		Enter food you want to add : samosa
		Enter food you want to add : jalebi
		Enter food you want to add : peda
		Enter food you want to add : gulabjamun
		Enter food you want to add : dahi vada ya bada so much confusion
		Enter food you want to add : same confusion for pav vada ya vada pav
		Enter food you want to add : quit



























Projects based on Machine learning :
Smart Traffic Management System: Use computer vision and machine learning to optimize traffic signals based on real-time traffic conditions and reduce traffic congestion.

Sentiment Analysis of Social Media Data: Analyze social media data to determine the sentiment of users towards a particular topic, brand or product.

E-commerce Website with Recommendation System: Create an e-commerce website with a personalized product recommendation system that suggests products to users based on their browsing and purchase history.

Automated Attendance System: Use face recognition technology to automate attendance taking in classrooms or workplaces.

Neural Machine Translation: Build a machine translation model using neural networks that can translate text from one language to another.

Stock Price Prediction: Use machine learning algorithms to predict stock prices based on historical data and other variables.

Fraud Detection System: Use machine learning algorithms to detect fraudulent transactions in financial systems.

Autonomous Robot Navigation: Build a robot that can autonomously navigate through a maze using computer vision and machine learning techniques.

Voice Assistant with Natural Language Processing: Build a voice assistant like Siri or Alexa that can understand and respond to natural language commands.

Human Emotion Recognition: Use computer vision and machine learning to detect human emotions from facial expressions
